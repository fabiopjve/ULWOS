   1                             	r8	=	0xffef0
   2                             	r16	=	0xffee8
   3                             	r24	=	0xffee0
   4                             	r9	=	0xffef1
   5                             	r17	=	0xffee9
   6                             	r25	=	0xffee1
   7                             	r10	=	0xffef2
   8                             	r18	=	0xffeea
   9                             	r26	=	0xffee2
  10                             	r11	=	0xffef3
  11                             	r19	=	0xffeeb
  12                             	r27	=	0xffee3
  13                             	r12	=	0xffef4
  14                             	r20	=	0xffeec
  15                             	r28	=	0xffee4
  16                             	r13	=	0xffef5
  17                             	r21	=	0xffeed
  18                             	r29	=	0xffee5
  19                             	r14	=	0xffef6
  20                             	r22	=	0xffeee
  21                             	r30	=	0xffee6
  22                             	r15	=	0xffef7
  23                             	r23	=	0xffeef
  24                             	r31	=	0xffee7
  25                             	.text
  26                             	.Ltext0:
  27                             		.global	_save_context
  29                             	_save_context:
  30                             	.LFB0:
  31                             		.file 1 "../src/ulwos.c"
   1:../src/ulwos.c **** /*
   2:../src/ulwos.c ****  * ULWOS - Ultra Lightweight Operating System
   3:../src/ulwos.c ****  *
   4:../src/ulwos.c ****  * ULWOS is not a real operating system but a pre-emptive task switcher. It was designed to
   5:../src/ulwos.c ****  * demonstrate the basics of a multi-tasking system with minimum memory footprint.
   6:../src/ulwos.c ****  *
   7:../src/ulwos.c ****  * The following code makes heavy use of assembly language!!!The code is compatible with GCC compil
   8:../src/ulwos.c ****  *
   9:../src/ulwos.c ****  * Copyright: FÃ¡bio Pereira 2016
  10:../src/ulwos.c ****  *
  11:../src/ulwos.c ****  */
  12:../src/ulwos.c **** 
  13:../src/ulwos.c **** #include "iodefine.h"
  14:../src/ulwos.c **** #include "iodefine_ext.h"
  15:../src/ulwos.c **** #include "myrl78.h"
  16:../src/ulwos.c **** #include "interrupt_handlers.h"
  17:../src/ulwos.c **** #include "ulwos.h"
  18:../src/ulwos.c **** 
  19:../src/ulwos.c **** static unsigned volatile int tempSP;
  20:../src/ulwos.c **** static unsigned volatile int task_context[ULWOS_NUM_TASKS][12];
  21:../src/ulwos.c **** static unsigned volatile int taskSP[ULWOS_NUM_TASKS];
  22:../src/ulwos.c **** static volatile ULWOS_TASKHANDLER current_task=0;
  23:../src/ulwos.c **** static volatile char num_tasks=0;
  24:../src/ulwos.c **** volatile char task_stack[ULWOS_NUM_TASKS][ULWOS_TASK_STACK_SIZE];
  25:../src/ulwos.c **** 
  26:../src/ulwos.c **** #define save_regs()	asm volatile ("push AX\n\tpush BC\n\tpush DE\n\tpush HL\n\t")
  27:../src/ulwos.c **** #define restore_regs() asm volatile ("pop HL\n\tpop DE\n\tpop BC\n\tpop AX\n\t")
  28:../src/ulwos.c **** 
  29:../src/ulwos.c **** void inline save_context(void){
  32                             		.loc 1 29 0
  30:../src/ulwos.c **** 	asm volatile (
  33                             		.loc 1 30 0
  34                             	 ; 30 "../src/ulwos.c" 1
  35 0000 61 FF                   		sel RB3
  36 0002 D9 01 00                		mov X,!_current_task
  37 0005 F1                      		clrb A
  38 0006 31 1D                   		shlw AX,1
  39 0008 32 02 00                		movw BC,#_taskSP
  40 000b 03                      		addw AX,BC
  41 000c 14                      		movw DE,AX
  42 000d AE F8                   		movw AX,SP
  43 000f B9                      		movw [DE],AX
  44 0010 51 18                   		mov A,#24
  45 0012 D9 01 00                		mov X,!_current_task
  46 0015 80                      		inc X
  47 0016 D6                      		mulu X
  48 0017 04 12 00                		addw AX,#_task_context
  49 001a BE F8                   		movw SP,AX
  50                             		
  51                             	 ; 0 "" 2
  31:../src/ulwos.c **** 		"sel RB3\n\t"		// We are going to use bank3 as it is reserved for isr code
  32:../src/ulwos.c **** 		"mov X,%0\n\t"		// X = current_task
  33:../src/ulwos.c **** 		"clrb A\n\t"		// A = 0 (AX = current_task)
  34:../src/ulwos.c **** 		"shlw AX,1\n\t"		// AX = current_task*2
  35:../src/ulwos.c **** 		"movw BC,%2\n\t"	// BC = taskSP
  36:../src/ulwos.c **** 		"addw AX,BC\n\t"	// AX = taskSP+(current_task*2) => taskSP[current_task]
  37:../src/ulwos.c **** 		"movw DE,AX\n\t"	// DE = taskSP[current_task]
  38:../src/ulwos.c **** 		"movw AX,SP\n\t"	// AX = task's SP
  39:../src/ulwos.c **** 		"movw [DE],AX\n\t"	// task_SP[current_task] = task's SP
  40:../src/ulwos.c **** 		// now we set the pointer to the context stack, so we can save current context
  41:../src/ulwos.c **** 		"mov A,#24\n\t"		// A = 24
  42:../src/ulwos.c **** 		"mov X,%0\n\t"		// X = current_task
  43:../src/ulwos.c **** 		"inc X\n\t"			// X = current_task+1 (so we to the top of the context stack)
  44:../src/ulwos.c **** 		"mulu X\n\t"		// AX = 24 * (current_task+1)
  45:../src/ulwos.c **** 		"addw AX,%1\n\t"	// AX = address of task_context[current_task]
  46:../src/ulwos.c **** 		"movw SP,AX\n\t"	// set the SP to the top of task's context stack
  47:../src/ulwos.c **** 		:
  48:../src/ulwos.c **** 		:"m"(current_task),"i"(task_context),"i"(taskSP)
  49:../src/ulwos.c **** 	);
  50:../src/ulwos.c **** 	// now we save registers from banks 2,1 and 0 into the context stack
  51:../src/ulwos.c **** 	asm ("sel RB2");
  52                             		.loc 1 51 0
  53                             	 ; 51 "../src/ulwos.c" 1
  54 001c 61 EF                   		sel RB2
  55                             	 ; 0 "" 2
  52:../src/ulwos.c **** 	save_regs();		// save regs from bank 2
  56                             		.loc 1 52 0
  57                             	 ; 52 "../src/ulwos.c" 1
  58 001e C1                      		push AX
  59 001f C3                      		push BC
  60 0020 C5                      		push DE
  61 0021 C7                      		push HL
  62                             		
  63                             	 ; 0 "" 2
  53:../src/ulwos.c **** 	asm ("sel RB1");
  64                             		.loc 1 53 0
  65                             	 ; 53 "../src/ulwos.c" 1
  66 0022 61 DF                   		sel RB1
  67                             	 ; 0 "" 2
  54:../src/ulwos.c **** 	save_regs();		// save regs from bank 1
  68                             		.loc 1 54 0
  69                             	 ; 54 "../src/ulwos.c" 1
  70 0024 C1                      		push AX
  71 0025 C3                      		push BC
  72 0026 C5                      		push DE
  73 0027 C7                      		push HL
  74                             		
  75                             	 ; 0 "" 2
  55:../src/ulwos.c **** 	asm ("sel RB0");
  76                             		.loc 1 55 0
  77                             	 ; 55 "../src/ulwos.c" 1
  78 0028 61 CF                   		sel RB0
  79                             	 ; 0 "" 2
  56:../src/ulwos.c **** 	save_regs();		// save regs from bank 0
  80                             		.loc 1 56 0
  81                             	 ; 56 "../src/ulwos.c" 1
  82 002a C1                      		push AX
  83 002b C3                      		push BC
  84 002c C5                      		push DE
  85 002d C7                      		push HL
  86                             		
  87                             	 ; 0 "" 2
  57:../src/ulwos.c **** 	asm ("sel RB3");
  88                             		.loc 1 57 0
  89                             	 ; 57 "../src/ulwos.c" 1
  90 002e 61 FF                   		sel RB3
  91                             	 ; 0 "" 2
  58:../src/ulwos.c **** }
  92                             		.loc 1 58 0
  93 0030 D7                      		ret
  94                             	.LFE0:
  96                             		.global	_restore_context
  98                             	_restore_context:
  99                             	.LFB1:
  59:../src/ulwos.c **** 
  60:../src/ulwos.c **** void inline restore_context(void){
 100                             		.loc 1 60 0
  61:../src/ulwos.c **** 	asm volatile (
 101                             		.loc 1 61 0
 102                             	 ; 61 "../src/ulwos.c" 1
 103 0031 51 18                   		mov A,#24
 104 0033 D9 01 00                		mov X,!_current_task
 105 0036 D6                      		mulu X
 106 0037 04 12 00                		addw AX,#_task_context
 107 003a BE F8                   		movw SP,AX
 108                             		
 109                             	 ; 0 "" 2
  62:../src/ulwos.c **** 		// now we set the pointer to the context stack, so we can save current context
  63:../src/ulwos.c **** 		"mov A,#24\n\t"		// A = 24
  64:../src/ulwos.c **** 		"mov X,%0\n\t"		// X = current_task
  65:../src/ulwos.c **** 		"mulu X\n\t"		// AX = 24 * (current_task)
  66:../src/ulwos.c **** 		"addw AX,%1\n\t"	// AX = address of task_context[current_task]
  67:../src/ulwos.c **** 		"movw SP,AX\n\t"	// set the SP to the top of task's context stack
  68:../src/ulwos.c **** 		:
  69:../src/ulwos.c **** 		:"m"(current_task),"i"(task_context)
  70:../src/ulwos.c **** 	);
  71:../src/ulwos.c **** 	// now we restore registers from banks 0,1 and 2 from the stack
  72:../src/ulwos.c **** 	asm ("sel RB0");
 110                             		.loc 1 72 0
 111                             	 ; 72 "../src/ulwos.c" 1
 112 003c 61 CF                   		sel RB0
 113                             	 ; 0 "" 2
  73:../src/ulwos.c **** 	restore_regs();		// restore regs from bank 0
 114                             		.loc 1 73 0
 115                             	 ; 73 "../src/ulwos.c" 1
 116 003e C6                      		pop HL
 117 003f C4                      		pop DE
 118 0040 C2                      		pop BC
 119 0041 C0                      		pop AX
 120                             		
 121                             	 ; 0 "" 2
  74:../src/ulwos.c **** 	asm ("sel RB1");
 122                             		.loc 1 74 0
 123                             	 ; 74 "../src/ulwos.c" 1
 124 0042 61 DF                   		sel RB1
 125                             	 ; 0 "" 2
  75:../src/ulwos.c **** 	restore_regs();		// restore regs from bank 1
 126                             		.loc 1 75 0
 127                             	 ; 75 "../src/ulwos.c" 1
 128 0044 C6                      		pop HL
 129 0045 C4                      		pop DE
 130 0046 C2                      		pop BC
 131 0047 C0                      		pop AX
 132                             		
 133                             	 ; 0 "" 2
  76:../src/ulwos.c **** 	asm ("sel RB2");
 134                             		.loc 1 76 0
 135                             	 ; 76 "../src/ulwos.c" 1
 136 0048 61 EF                   		sel RB2
 137                             	 ; 0 "" 2
  77:../src/ulwos.c **** 	restore_regs();		// restore regs from bank 2
 138                             		.loc 1 77 0
 139                             	 ; 77 "../src/ulwos.c" 1
 140 004a C6                      		pop HL
 141 004b C4                      		pop DE
 142 004c C2                      		pop BC
 143 004d C0                      		pop AX
 144                             		
 145                             	 ; 0 "" 2
  78:../src/ulwos.c **** 	asm volatile (
 146                             		.loc 1 78 0
 147                             	 ; 78 "../src/ulwos.c" 1
 148 004e 61 FF                   		sel RB3
 149 0050 D9 01 00                		mov X,!_current_task
 150 0053 F1                      		clrb A
 151 0054 31 1D                   		shlw AX,1
 152 0056 32 02 00                		movw BC,#_taskSP
 153 0059 03                      		addw AX,BC
 154 005a 14                      		movw DE,AX
 155 005b A9                      		movw AX,[DE]
 156 005c BE F8                   		movw SP,AX
 157 005e 61 FC                   		reti
 158                             		
 159                             	 ; 0 "" 2
  79:../src/ulwos.c **** 		"sel RB3\n\t"
  80:../src/ulwos.c **** 		"mov X,%0\n\t"		// X = current_task
  81:../src/ulwos.c **** 		"clrb A\n\t"		// A = 0 (AX = current_task)
  82:../src/ulwos.c **** 		"shlw AX,1\n\t"		// AX = current_task*2
  83:../src/ulwos.c **** 		"movw BC,%1\n\t"	// BC = taskSP
  84:../src/ulwos.c **** 		"addw AX,BC\n\t"	// AX = address of taskSP+(current_task*2) => taskSP[current_task]
  85:../src/ulwos.c **** 		"movw DE,AX\n\t"	// DE = address of taskSP[current_task]
  86:../src/ulwos.c **** 		"movw AX,[DE]\n\t"	// AX = taskSP[current_task]
  87:../src/ulwos.c **** 		"movw SP,AX\n\t"	// set the SP for the current task
  88:../src/ulwos.c **** 		"reti\n\t"			// return from this interrupt (change the context)
  89:../src/ulwos.c **** 		:
  90:../src/ulwos.c **** 		:"m"(current_task),"i"(taskSP)
  91:../src/ulwos.c **** 	);
  92:../src/ulwos.c **** }
 160                             		.loc 1 92 0
 161 0060 D7                      		ret
 162                             	.LFE1:
 164                             		.global	_ulwos_create_task
 166                             	_ulwos_create_task:
 167                             	.LFB2:
  93:../src/ulwos.c **** 
  94:../src/ulwos.c **** ULWOS_TASKHANDLER ulwos_create_task(void * task_address){
 168                             		.loc 1 94 0
 169                             	.LVL0:
  95:../src/ulwos.c **** 	if (num_tasks>=ULWOS_NUM_TASKS) return -1;
 170                             		.loc 1 95 0
 171 0061 40 00 00 07             		cmp	!_num_tasks, #7
 172 0065 61 F3                   		 sknh
 173 0067 EC AE 00 00             		 br	!!.L5
  96:../src/ulwos.c **** 	tempSP = (int) task_address;
 174                             		.loc 1 96 0
 175 006b A8 04                   		movw	ax, [sp+4]
 176 006d BF D2 00                		movw	!_tempSP, ax
  97:../src/ulwos.c **** 	current_task = num_tasks;
 177                             		.loc 1 97 0
 178 0070 8F 00 00                		mov	a, !_num_tasks
 179 0073 9F 01 00                		mov	!_current_task, a
  98:../src/ulwos.c **** 	num_tasks++;
 180                             		.loc 1 98 0
 181 0076 A0 00 00                		inc	!_num_tasks
  99:../src/ulwos.c **** 	asm volatile (
 182                             		.loc 1 99 0
 183                             	 ; 99 "../src/ulwos.c" 1
 184 0079 61 FF                   		sel RB3
 185 007b FB F8 FF                		movw HL,SP
 186 007e 51 80                   		mov A,#128
 187 0080 D9 01 00                		mov X,!_current_task
 188 0083 80                      		inc X
 189 0084 D6                      		mulu X
 190 0085 12                      		movw BC,AX
 191 0086 30 00 00                		movw AX,#_task_stack
 192 0089 03                      		addw AX,BC
 193 008a BE F8                   		movw SP,AX
 194 008c 14                      		movw DE,AX
 195 008d 30 00 86                		movw AX,#0x8600
 196 0090 C1                      		push AX
 197 0091 AF D2 00                		movw AX,!_tempSP
 198 0094 C1                      		push AX
 199                             		
 200                             	 ; 0 "" 2
 100:../src/ulwos.c **** 		"sel RB3\n\t"
 101:../src/ulwos.c **** 		"movw HL,SP\n\t"	// HL has the old SP
 102:../src/ulwos.c **** 		"mov A,%0\n\t"		// A = ULWOS_TASK_STACK_SIZE
 103:../src/ulwos.c **** 		"mov X,%1\n\t"		// X = current_task
 104:../src/ulwos.c **** 		"inc X\n\t"			// X = current_task+1 (so we can calculate the top of the current stack)
 105:../src/ulwos.c **** 		"mulu X\n\t"		// AX = ULWOS_TASK_STACK_SIZE * (current_task+1)
 106:../src/ulwos.c **** 		"movw BC,AX\n\t"
 107:../src/ulwos.c **** 		"movw AX,%2\n\t"
 108:../src/ulwos.c **** 		"addw AX,BC\n\t"	// AX = pointer to task_stack[current_stack]
 109:../src/ulwos.c **** 		"movw SP,AX\n\t"	// set the SP to the top of the new task stack
 110:../src/ulwos.c **** 		"movw DE,AX\n\t"	// DE has the TOS for this task
 111:../src/ulwos.c **** 		"movw AX,#0x8600\n\t"
 112:../src/ulwos.c **** 		"push AX\n\t"		// save PSW and PCH (all 0)
 113:../src/ulwos.c **** 		"movw AX,%3\n\t"	// AX = task function address (stored in tempSP)
 114:../src/ulwos.c **** 		"push AX\n\t"		// save the function address onto stack
 115:../src/ulwos.c **** 		:
 116:../src/ulwos.c **** 		:"i"(ULWOS_TASK_STACK_SIZE),"m"(current_task),"i"(task_stack),"m"(tempSP)
 117:../src/ulwos.c **** 	);
 118:../src/ulwos.c **** 	asm volatile (
 201                             		.loc 1 118 0
 202                             	 ; 118 "../src/ulwos.c" 1
 203 0095 D9 01 00                		mov X,!_current_task
 204 0098 F1                      		clrb A
 205 0099 31 1D                   		shlw AX,1
 206 009b 32 02 00                		movw BC,#_taskSP
 207 009e 03                      		addw AX,BC
 208 009f 14                      		movw DE,AX
 209 00a0 AE F8                   		movw AX,SP
 210 00a2 B9                      		movw [DE],AX
 211 00a3 17                      		movw AX,HL
 212 00a4 BE F8                   		movw SP,AX
 213 00a6 61 CF                   		sel RB0
 214                             		
 215                             	 ; 0 "" 2
 119:../src/ulwos.c **** 		"mov X,%1\n\t"		// X = current_task
 120:../src/ulwos.c **** 		"clrb A\n\t"		// A = 0 (AX = current_task)
 121:../src/ulwos.c **** 		"shlw AX,1\n\t"		// AX = current_task*2
 122:../src/ulwos.c **** 		"movw BC,%0\n\t"	// BC = taskSP
 123:../src/ulwos.c **** 		"addw AX,BC\n\t"	// AX = taskSP+(current_task*2) => taskSP[current_task]
 124:../src/ulwos.c **** 		"movw DE,AX\n\t"	// DE = taskSP[current_task]
 125:../src/ulwos.c **** 		"movw AX,SP\n\t"	// AX = task's SP
 126:../src/ulwos.c **** 		"movw [DE],AX\n\t"	// task_SP[current_task] = task's SP
 127:../src/ulwos.c **** 		"movw AX,HL\n\t"
 128:../src/ulwos.c **** 		"movw SP,AX\n\t"	// restore the old SP
 129:../src/ulwos.c **** 		"sel RB0\n\t"
 130:../src/ulwos.c **** 		:
 131:../src/ulwos.c **** 		:"i"(taskSP),"m"(current_task)
 132:../src/ulwos.c **** 	);
 133:../src/ulwos.c **** 	return current_task;
 216                             		.loc 1 133 0
 217 00a8 8F 01 00                		mov	a, !_current_task
 218 00ab 9D F0                   		mov	r8, a
 134:../src/ulwos.c **** }
 219                             		.loc 1 134 0
 220 00ad D7                      		ret
 221                             	.L5:
  95:../src/ulwos.c **** 	tempSP = (int) task_address;
 222                             		.loc 1 95 0
 223 00ae CD F0 FF                		mov	r8, #-1
 224                             		.loc 1 134 0
 225 00b1 D7                      		ret
 226                             	.LFE2:
 228                             		.global	_ulwos_start
 230                             	_ulwos_start:
 231                             	.LFB3:
 135:../src/ulwos.c **** 
 136:../src/ulwos.c **** void inline ulwos_start(void){
 232                             		.loc 1 136 0
 137:../src/ulwos.c **** 	current_task = 0;
 233                             		.loc 1 137 0
 234 00b2 F5 01 00                		clrb	!_current_task
 138:../src/ulwos.c **** 	OSMC = bWUTMMCK0;		// set LOCO (15kHz) as the IT/RTC clock source
 235                             		.loc 1 138 0
 236 00b5 51 10                   		mov	a, #16
 237 00b7 9F F3 00                		mov	!243, a
 139:../src/ulwos.c **** 	RTCEN = 1;				// enables the RTC and IT
 238                             		.loc 1 139 0
 239 00ba 71 70 F0 00             		set1	!240.7
 140:../src/ulwos.c **** 	ITMC = bRINTE | 14;		// IT enabled, interval = 1ms
 240                             		.loc 1 140 0
 241 00be 30 0E 80                		movw	ax, #-32754
 242 00c1 BF 90 FF                		movw	!-112, ax
 141:../src/ulwos.c **** 	ITMK = 0;				// IT interrupt enabled
 243                             		.loc 1 141 0
 244 00c4 71 28 E7 FF             		clr1	!-25.2
 142:../src/ulwos.c **** 	asm volatile (
 245                             		.loc 1 142 0
 246                             	 ; 142 "../src/ulwos.c" 1
 247 00c8 61 FF                   		sel RB3
 248 00ca AF 02 00                		movw AX,!_taskSP
 249 00cd BE F8                   		movw SP,AX
 250 00cf 61 FC                   		reti
 251 00d1 00                      		nop
 252                             		
 253                             	 ; 0 "" 2
 143:../src/ulwos.c **** 		"sel RB3\n\t"		// select register bank 3
 144:../src/ulwos.c **** 		"movw AX,%0\n\t"	// AX = taskSP[0]
 145:../src/ulwos.c **** 		"movw SP,AX\n\t"	// SP = AX = taskSP[0]
 146:../src/ulwos.c **** 		// this is a fake return from interrupt, it restores the PSW and PC from the stack
 147:../src/ulwos.c **** 		"reti\n\t"
 148:../src/ulwos.c **** 		"nop\n\t"
 149:../src/ulwos.c **** 		:
 150:../src/ulwos.c **** 		:"m"(taskSP)
 151:../src/ulwos.c **** 	);
 152:../src/ulwos.c **** }
 254                             		.loc 1 152 0
 255 00d2 D7                      		ret
 256                             	.LFE3:
 258                             		.global	_INT_IT
 260                             	_INT_IT:
 261                             	.LFB4:
 153:../src/ulwos.c **** 
 154:../src/ulwos.c **** void __attribute__ ((naked)) INT_IT(void) {
 262                             		.loc 1 154 0
 263                             		; start of function
 264                             		; push 12: ax bc de hl r8 r10
 265                             	.LBB6:
 266                             	.LBB7:
  30:../src/ulwos.c **** 		"sel RB3\n\t"		// We are going to use bank3 as it is reserved for isr code
 267                             		.loc 1 30 0
 268                             	 ; 30 "../src/ulwos.c" 1
 269 00d3 61 FF                   		sel RB3
 270 00d5 D9 01 00                		mov X,!_current_task
 271 00d8 F1                      		clrb A
 272 00d9 31 1D                   		shlw AX,1
 273 00db 32 02 00                		movw BC,#_taskSP
 274 00de 03                      		addw AX,BC
 275 00df 14                      		movw DE,AX
 276 00e0 AE F8                   		movw AX,SP
 277 00e2 B9                      		movw [DE],AX
 278 00e3 51 18                   		mov A,#24
 279 00e5 D9 01 00                		mov X,!_current_task
 280 00e8 80                      		inc X
 281 00e9 D6                      		mulu X
 282 00ea 04 12 00                		addw AX,#_task_context
 283 00ed BE F8                   		movw SP,AX
 284                             		
 285                             	 ; 0 "" 2
  51:../src/ulwos.c **** 	save_regs();		// save regs from bank 2
 286                             		.loc 1 51 0
 287                             	 ; 51 "../src/ulwos.c" 1
 288 00ef 61 EF                   		sel RB2
 289                             	 ; 0 "" 2
  52:../src/ulwos.c **** 	asm ("sel RB1");
 290                             		.loc 1 52 0
 291                             	 ; 52 "../src/ulwos.c" 1
 292 00f1 C1                      		push AX
 293 00f2 C3                      		push BC
 294 00f3 C5                      		push DE
 295 00f4 C7                      		push HL
 296                             		
 297                             	 ; 0 "" 2
  53:../src/ulwos.c **** 	save_regs();		// save regs from bank 1
 298                             		.loc 1 53 0
 299                             	 ; 53 "../src/ulwos.c" 1
 300 00f5 61 DF                   		sel RB1
 301                             	 ; 0 "" 2
  54:../src/ulwos.c **** 	asm ("sel RB0");
 302                             		.loc 1 54 0
 303                             	 ; 54 "../src/ulwos.c" 1
 304 00f7 C1                      		push AX
 305 00f8 C3                      		push BC
 306 00f9 C5                      		push DE
 307 00fa C7                      		push HL
 308                             		
 309                             	 ; 0 "" 2
  55:../src/ulwos.c **** 	save_regs();		// save regs from bank 0
 310                             		.loc 1 55 0
 311                             	 ; 55 "../src/ulwos.c" 1
 312 00fb 61 CF                   		sel RB0
 313                             	 ; 0 "" 2
  56:../src/ulwos.c **** 	asm ("sel RB3");
 314                             		.loc 1 56 0
 315                             	 ; 56 "../src/ulwos.c" 1
 316 00fd C1                      		push AX
 317 00fe C3                      		push BC
 318 00ff C5                      		push DE
 319 0100 C7                      		push HL
 320                             		
 321                             	 ; 0 "" 2
  57:../src/ulwos.c **** }
 322                             		.loc 1 57 0
 323                             	 ; 57 "../src/ulwos.c" 1
 324 0101 61 FF                   		sel RB3
 325                             	 ; 0 "" 2
 326                             	.LBE7:
 327                             	.LBE6:
 155:../src/ulwos.c **** 	save_context();
 156:../src/ulwos.c **** 	current_task++;
 328                             		.loc 1 156 0
 329 0103 A0 01 00                		inc	!_current_task
 157:../src/ulwos.c **** 	if (current_task>=num_tasks) current_task=0;
 330                             		.loc 1 157 0
 331 0106 8F 01 00                		mov	a, !_current_task
 332 0109 9D F2                   		mov	r10, a
 333 010b 8F 00 00                		mov	a, !_num_tasks
 334 010e 9D F0                   		mov	r8, a
 335 0110 8D F2                   		mov	a, r10
 336 0112 31 8F                   		sarw	ax, 8
 337 0114 CD F1 00                		mov	r9, #0
 338 0117 46 F0                   		cmpw	ax, r8
 339 0119 71 FF                   		 xor1	CY, a.7
 340 011b 71 77 F1                		 xor1	CY, r9.7
 341 011e 61 D8                   		 sknc
 342 0120 EC 27 01 00             		 br	!!.L9
 343                             		.loc 1 157 0 is_stmt 0 discriminator 1
 344 0124 F5 01 00                		clrb	!_current_task
 345                             	.L9:
 346                             	.LBB8:
 347                             	.LBB9:
  61:../src/ulwos.c **** 		// now we set the pointer to the context stack, so we can save current context
 348                             		.loc 1 61 0 is_stmt 1
 349                             	 ; 61 "../src/ulwos.c" 1
 350 0127 51 18                   		mov A,#24
 351 0129 D9 01 00                		mov X,!_current_task
 352 012c D6                      		mulu X
 353 012d 04 12 00                		addw AX,#_task_context
 354 0130 BE F8                   		movw SP,AX
 355                             		
 356                             	 ; 0 "" 2
  72:../src/ulwos.c **** 	restore_regs();		// restore regs from bank 0
 357                             		.loc 1 72 0
 358                             	 ; 72 "../src/ulwos.c" 1
 359 0132 61 CF                   		sel RB0
 360                             	 ; 0 "" 2
  73:../src/ulwos.c **** 	asm ("sel RB1");
 361                             		.loc 1 73 0
 362                             	 ; 73 "../src/ulwos.c" 1
 363 0134 C6                      		pop HL
 364 0135 C4                      		pop DE
 365 0136 C2                      		pop BC
 366 0137 C0                      		pop AX
 367                             		
 368                             	 ; 0 "" 2
  74:../src/ulwos.c **** 	restore_regs();		// restore regs from bank 1
 369                             		.loc 1 74 0
 370                             	 ; 74 "../src/ulwos.c" 1
 371 0138 61 DF                   		sel RB1
 372                             	 ; 0 "" 2
  75:../src/ulwos.c **** 	asm ("sel RB2");
 373                             		.loc 1 75 0
 374                             	 ; 75 "../src/ulwos.c" 1
 375 013a C6                      		pop HL
 376 013b C4                      		pop DE
 377 013c C2                      		pop BC
 378 013d C0                      		pop AX
 379                             		
 380                             	 ; 0 "" 2
  76:../src/ulwos.c **** 	restore_regs();		// restore regs from bank 2
 381                             		.loc 1 76 0
 382                             	 ; 76 "../src/ulwos.c" 1
 383 013e 61 EF                   		sel RB2
 384                             	 ; 0 "" 2
  77:../src/ulwos.c **** 	asm volatile (
 385                             		.loc 1 77 0
 386                             	 ; 77 "../src/ulwos.c" 1
 387 0140 C6                      		pop HL
 388 0141 C4                      		pop DE
 389 0142 C2                      		pop BC
 390 0143 C0                      		pop AX
 391                             		
 392                             	 ; 0 "" 2
  78:../src/ulwos.c **** 		"sel RB3\n\t"
 393                             		.loc 1 78 0
 394                             	 ; 78 "../src/ulwos.c" 1
 395 0144 61 FF                   		sel RB3
 396 0146 D9 01 00                		mov X,!_current_task
 397 0149 F1                      		clrb A
 398 014a 31 1D                   		shlw AX,1
 399 014c 32 02 00                		movw BC,#_taskSP
 400 014f 03                      		addw AX,BC
 401 0150 14                      		movw DE,AX
 402 0151 A9                      		movw AX,[DE]
 403 0152 BE F8                   		movw SP,AX
 404 0154 61 FC                   		reti
 405                             		
 406                             	 ; 0 "" 2
 407                             	.LBE9:
 408                             	.LBE8:
 409                             	.LFE4:
 411                             		.comm	_task_stack,1024,1
 412                             		.local	_num_tasks
 413                             		.comm	_num_tasks,1,1
 414                             		.local	_current_task
 415                             		.comm	_current_task,1,1
 416                             		.local	_taskSP
 417                             		.comm	_taskSP,16,2
 418                             		.local	_task_context
 419                             		.comm	_task_context,192,2
 420                             		.local	_tempSP
 421                             		.comm	_tempSP,2,2
 480                             	.Letext0:
 481                             		.file 2 "../src/iodefine.h"
 482                             		.file 3 "../src/iodefine_ext.h"
 483                             		.file 4 "../src/ulwos.h"
