   1                             	r8	=	0xffef0
   2                             	r16	=	0xffee8
   3                             	r24	=	0xffee0
   4                             	r9	=	0xffef1
   5                             	r17	=	0xffee9
   6                             	r25	=	0xffee1
   7                             	r10	=	0xffef2
   8                             	r18	=	0xffeea
   9                             	r26	=	0xffee2
  10                             	r11	=	0xffef3
  11                             	r19	=	0xffeeb
  12                             	r27	=	0xffee3
  13                             	r12	=	0xffef4
  14                             	r20	=	0xffeec
  15                             	r28	=	0xffee4
  16                             	r13	=	0xffef5
  17                             	r21	=	0xffeed
  18                             	r29	=	0xffee5
  19                             	r14	=	0xffef6
  20                             	r22	=	0xffeee
  21                             	r30	=	0xffee6
  22                             	r15	=	0xffef7
  23                             	r23	=	0xffeef
  24                             	r31	=	0xffee7
  25                             	.text
  26                             	.Ltext0:
  27                             		.global	_save_context
  29                             	_save_context:
  30                             	.LFB0:
  31                             		.file 1 "../src/ulwos.c"
   1:../src/ulwos.c **** /*
   2:../src/ulwos.c ****  * ULWOS - Ultra Lightweight Operating System
   3:../src/ulwos.c ****  *
   4:../src/ulwos.c ****  * ULWOS is not a real operating system but a preemptive task switcher. It was designed to
   5:../src/ulwos.c ****  * demonstrate the basics of a multitasking system with minimum memory footprint.
   6:../src/ulwos.c ****  *
   7:../src/ulwos.c ****  * The following code makes heavy use of assembly language!!!
   8:../src/ulwos.c ****  * The code is compatible with GCC compiler only!
   9:../src/ulwos.c ****  *
  10:../src/ulwos.c ****  * Author: FÃ¡bio Pereira
  11:../src/ulwos.c ****  * fabio.jve@gmail.com
  12:../src/ulwos.c ****  *
  13:../src/ulwos.c ****  * RL78 Port on 02/26/2016
  14:../src/ulwos.c ****  *
  15:../src/ulwos.c ****  * This work is licensed under the Creative Commons Attribution 4.0 International License.
  16:../src/ulwos.c ****  * To view a copy of this license, visit http://creativecommons.org/licenses/by/4.0/.
  17:../src/ulwos.c ****  */
  18:../src/ulwos.c **** 
  19:../src/ulwos.c **** #include "iodefine.h"
  20:../src/ulwos.c **** #include "iodefine_ext.h"
  21:../src/ulwos.c **** #include "myrl78.h"
  22:../src/ulwos.c **** #include "interrupt_handlers.h"
  23:../src/ulwos.c **** #include "ulwos.h"
  24:../src/ulwos.c **** 
  25:../src/ulwos.c **** static unsigned volatile int ulwos_tempSP;
  26:../src/ulwos.c **** static unsigned volatile int ulwos_task_context[ULWOS_NUM_TASKS][12];
  27:../src/ulwos.c **** static unsigned volatile int ulwos_taskSP[ULWOS_NUM_TASKS];
  28:../src/ulwos.c **** static volatile ULWOS_TASKHANDLER ulwos_current_task=0;
  29:../src/ulwos.c **** static volatile char ulwos_num_tasks=0;
  30:../src/ulwos.c **** volatile char ulwos_task_stack[ULWOS_NUM_TASKS][ULWOS_TASK_STACK_SIZE];
  31:../src/ulwos.c **** 
  32:../src/ulwos.c **** #define save_regs()	asm ("push AX\n\tpush BC\n\tpush DE\n\tpush HL\n\t")
  33:../src/ulwos.c **** #define restore_regs() asm ("pop HL\n\tpop DE\n\tpop BC\n\tpop AX\n\t")
  34:../src/ulwos.c **** 
  35:../src/ulwos.c **** void inline save_context(void){
  32                             		.loc 1 35 0
  36:../src/ulwos.c **** 	asm volatile (
  33                             		.loc 1 36 0
  34                             	 ; 36 "../src/ulwos.c" 1
  35 0000 61 FF                   		sel RB3
  36 0002 D9 01 00                		mov X,!_ulwos_current_task
  37 0005 F1                      		clrb A
  38 0006 31 1D                   		shlw AX,1
  39 0008 32 02 00                		movw BC,#_ulwos_taskSP
  40 000b 03                      		addw AX,BC
  41 000c 14                      		movw DE,AX
  42 000d AE F8                   		movw AX,SP
  43 000f B9                      		movw [DE],AX
  44 0010 51 18                   		mov A,#24
  45 0012 D9 01 00                		mov X,!_ulwos_current_task
  46 0015 80                      		inc X
  47 0016 D6                      		mulu X
  48 0017 04 0A 00                		addw AX,#_ulwos_task_context
  49 001a BE F8                   		movw SP,AX
  50                             		
  51                             	 ; 0 "" 2
  37:../src/ulwos.c **** 		"sel RB3\n\t"		// We are going to use bank3 as it is reserved for isr code
  38:../src/ulwos.c **** 		"mov X,%[ct]\n\t"	// X = current_task
  39:../src/ulwos.c **** 		"clrb A\n\t"		// A = 0 (AX = current_task)
  40:../src/ulwos.c **** 		"shlw AX,1\n\t"		// AX = current_task*2
  41:../src/ulwos.c **** 		"movw BC,%[tsp]\n\t"// BC = taskSP
  42:../src/ulwos.c **** 		"addw AX,BC\n\t"	// AX = taskSP+(current_task*2) => taskSP[current_task]
  43:../src/ulwos.c **** 		"movw DE,AX\n\t"	// DE = taskSP[current_task]
  44:../src/ulwos.c **** 		"movw AX,SP\n\t"	// AX = task's SP
  45:../src/ulwos.c **** 		"movw [DE],AX\n\t"	// task_SP[current_task] = task's SP
  46:../src/ulwos.c **** 		// now we set the pointer to the context stack, so we can save current context
  47:../src/ulwos.c **** 		"mov A,#24\n\t"		// A = 24
  48:../src/ulwos.c **** 		"mov X,%[ct]\n\t"	// X = current_task
  49:../src/ulwos.c **** 		"inc X\n\t"			// X = current_task+1 (so we to the top of the context stack)
  50:../src/ulwos.c **** 		"mulu X\n\t"		// AX = 24 * (current_task+1)
  51:../src/ulwos.c **** 		"addw AX,%[tc]\n\t"	// AX = address of task_context[current_task]
  52:../src/ulwos.c **** 		"movw SP,AX\n\t"	// set the SP to the top of task's context stack
  53:../src/ulwos.c **** 		:
  54:../src/ulwos.c **** 		:[ct]"m"(ulwos_current_task),[tc]"i"(ulwos_task_context),[tsp]"i"(ulwos_taskSP)
  55:../src/ulwos.c **** 	);
  56:../src/ulwos.c **** 	// now we save registers from banks 2,1 and 0 into the context stack
  57:../src/ulwos.c **** 	asm ("sel RB2");
  52                             		.loc 1 57 0
  53                             	 ; 57 "../src/ulwos.c" 1
  54 001c 61 EF                   		sel RB2
  55                             	 ; 0 "" 2
  58:../src/ulwos.c **** 	save_regs();		// save regs from bank 2
  56                             		.loc 1 58 0
  57                             	 ; 58 "../src/ulwos.c" 1
  58 001e C1                      		push AX
  59 001f C3                      		push BC
  60 0020 C5                      		push DE
  61 0021 C7                      		push HL
  62                             		
  63                             	 ; 0 "" 2
  59:../src/ulwos.c **** 	asm ("sel RB1");
  64                             		.loc 1 59 0
  65                             	 ; 59 "../src/ulwos.c" 1
  66 0022 61 DF                   		sel RB1
  67                             	 ; 0 "" 2
  60:../src/ulwos.c **** 	save_regs();		// save regs from bank 1
  68                             		.loc 1 60 0
  69                             	 ; 60 "../src/ulwos.c" 1
  70 0024 C1                      		push AX
  71 0025 C3                      		push BC
  72 0026 C5                      		push DE
  73 0027 C7                      		push HL
  74                             		
  75                             	 ; 0 "" 2
  61:../src/ulwos.c **** 	asm ("sel RB0");
  76                             		.loc 1 61 0
  77                             	 ; 61 "../src/ulwos.c" 1
  78 0028 61 CF                   		sel RB0
  79                             	 ; 0 "" 2
  62:../src/ulwos.c **** 	save_regs();		// save regs from bank 0
  80                             		.loc 1 62 0
  81                             	 ; 62 "../src/ulwos.c" 1
  82 002a C1                      		push AX
  83 002b C3                      		push BC
  84 002c C5                      		push DE
  85 002d C7                      		push HL
  86                             		
  87                             	 ; 0 "" 2
  63:../src/ulwos.c **** 	asm ("sel RB3");
  88                             		.loc 1 63 0
  89                             	 ; 63 "../src/ulwos.c" 1
  90 002e 61 FF                   		sel RB3
  91                             	 ; 0 "" 2
  64:../src/ulwos.c **** }
  92                             		.loc 1 64 0
  93 0030 D7                      		ret
  94                             	.LFE0:
  96                             		.global	_restore_context
  98                             	_restore_context:
  99                             	.LFB1:
  65:../src/ulwos.c **** 
  66:../src/ulwos.c **** void inline restore_context(void){
 100                             		.loc 1 66 0
  67:../src/ulwos.c **** 	asm volatile (
 101                             		.loc 1 67 0
 102                             	 ; 67 "../src/ulwos.c" 1
 103 0031 51 18                   		mov A,#24
 104 0033 D9 01 00                		mov X,!_ulwos_current_task
 105 0036 D6                      		mulu X
 106 0037 04 0A 00                		addw AX,#_ulwos_task_context
 107 003a BE F8                   		movw SP,AX
 108                             		
 109                             	 ; 0 "" 2
  68:../src/ulwos.c **** 		// now we set the pointer to the context stack, so we can save current context
  69:../src/ulwos.c **** 		"mov A,#24\n\t"		// A = 24
  70:../src/ulwos.c **** 		"mov X,%[ct]\n\t"	// X = current_task
  71:../src/ulwos.c **** 		"mulu X\n\t"		// AX = 24 * (current_task)
  72:../src/ulwos.c **** 		"addw AX,%[tc]\n\t"	// AX = address of task_context[current_task]
  73:../src/ulwos.c **** 		"movw SP,AX\n\t"	// set the SP to the top of task's context stack
  74:../src/ulwos.c **** 		:
  75:../src/ulwos.c **** 		:[ct]"m"(ulwos_current_task),[tc]"i"(ulwos_task_context)
  76:../src/ulwos.c **** 	);
  77:../src/ulwos.c **** 	// now we restore registers from banks 0,1 and 2 from the stack
  78:../src/ulwos.c **** 	asm ("sel RB0");
 110                             		.loc 1 78 0
 111                             	 ; 78 "../src/ulwos.c" 1
 112 003c 61 CF                   		sel RB0
 113                             	 ; 0 "" 2
  79:../src/ulwos.c **** 	restore_regs();		// restore regs from bank 0
 114                             		.loc 1 79 0
 115                             	 ; 79 "../src/ulwos.c" 1
 116 003e C6                      		pop HL
 117 003f C4                      		pop DE
 118 0040 C2                      		pop BC
 119 0041 C0                      		pop AX
 120                             		
 121                             	 ; 0 "" 2
  80:../src/ulwos.c **** 	asm ("sel RB1");
 122                             		.loc 1 80 0
 123                             	 ; 80 "../src/ulwos.c" 1
 124 0042 61 DF                   		sel RB1
 125                             	 ; 0 "" 2
  81:../src/ulwos.c **** 	restore_regs();		// restore regs from bank 1
 126                             		.loc 1 81 0
 127                             	 ; 81 "../src/ulwos.c" 1
 128 0044 C6                      		pop HL
 129 0045 C4                      		pop DE
 130 0046 C2                      		pop BC
 131 0047 C0                      		pop AX
 132                             		
 133                             	 ; 0 "" 2
  82:../src/ulwos.c **** 	asm ("sel RB2");
 134                             		.loc 1 82 0
 135                             	 ; 82 "../src/ulwos.c" 1
 136 0048 61 EF                   		sel RB2
 137                             	 ; 0 "" 2
  83:../src/ulwos.c **** 	restore_regs();		// restore regs from bank 2
 138                             		.loc 1 83 0
 139                             	 ; 83 "../src/ulwos.c" 1
 140 004a C6                      		pop HL
 141 004b C4                      		pop DE
 142 004c C2                      		pop BC
 143 004d C0                      		pop AX
 144                             		
 145                             	 ; 0 "" 2
  84:../src/ulwos.c **** 	asm volatile (
 146                             		.loc 1 84 0
 147                             	 ; 84 "../src/ulwos.c" 1
 148 004e 61 FF                   		sel RB3
 149 0050 D9 01 00                		mov X,!_ulwos_current_task
 150 0053 F1                      		clrb A
 151 0054 31 1D                   		shlw AX,1
 152 0056 32 02 00                		movw BC,#_ulwos_taskSP
 153 0059 03                      		addw AX,BC
 154 005a 14                      		movw DE,AX
 155 005b A9                      		movw AX,[DE]
 156 005c BE F8                   		movw SP,AX
 157 005e 61 FC                   		reti
 158                             		
 159                             	 ; 0 "" 2
  85:../src/ulwos.c **** 		"sel RB3\n\t"
  86:../src/ulwos.c **** 		"mov X,%[ct]\n\t"	// X = current_task
  87:../src/ulwos.c **** 		"clrb A\n\t"		// A = 0 (AX = current_task)
  88:../src/ulwos.c **** 		"shlw AX,1\n\t"		// AX = current_task*2
  89:../src/ulwos.c **** 		"movw BC,%[tsp]\n\t"// BC = taskSP
  90:../src/ulwos.c **** 		"addw AX,BC\n\t"	// AX = address of taskSP+(current_task*2) => taskSP[current_task]
  91:../src/ulwos.c **** 		"movw DE,AX\n\t"	// DE = address of taskSP[current_task]
  92:../src/ulwos.c **** 		"movw AX,[DE]\n\t"	// AX = taskSP[current_task]
  93:../src/ulwos.c **** 		"movw SP,AX\n\t"	// set the SP for the current task
  94:../src/ulwos.c **** 		"reti\n\t"			// return from this interrupt (change the context)
  95:../src/ulwos.c **** 		:
  96:../src/ulwos.c **** 		:[ct]"m"(ulwos_current_task),[tsp]"i"(ulwos_taskSP)
  97:../src/ulwos.c **** 	);
  98:../src/ulwos.c **** }
 160                             		.loc 1 98 0
 161 0060 D7                      		ret
 162                             	.LFE1:
 164                             		.global	_ulwos_create_task
 166                             	_ulwos_create_task:
 167                             	.LFB2:
  99:../src/ulwos.c **** 
 100:../src/ulwos.c **** ULWOS_TASKHANDLER ulwos_create_task(void * task_address){
 168                             		.loc 1 100 0
 169                             	.LVL0:
 101:../src/ulwos.c **** 	if (ulwos_num_tasks>=ULWOS_NUM_TASKS) return -1;
 170                             		.loc 1 101 0
 171 0061 40 00 00 03             		cmp	!_ulwos_num_tasks, #3
 172 0065 61 F3                   		 sknh
 173 0067 EC B8 00 00             		 br	!!.L5
 102:../src/ulwos.c **** 	ulwos_tempSP = (int) task_address;
 174                             		.loc 1 102 0
 175 006b A8 04                   		movw	ax, [sp+4]
 176 006d BF 6A 00                		movw	!_ulwos_tempSP, ax
 103:../src/ulwos.c **** 	ulwos_current_task = ulwos_num_tasks;
 177                             		.loc 1 103 0
 178 0070 8F 00 00                		mov	a, !_ulwos_num_tasks
 179 0073 9F 01 00                		mov	!_ulwos_current_task, a
 104:../src/ulwos.c **** 	ulwos_num_tasks++;
 180                             		.loc 1 104 0
 181 0076 A0 00 00                		inc	!_ulwos_num_tasks
 105:../src/ulwos.c **** 	asm volatile (
 182                             		.loc 1 105 0
 183                             	 ; 105 "../src/ulwos.c" 1
 184 0079 61 FF                   		sel RB3
 185 007b FB F8 FF                		movw HL,SP
 186 007e F6                      		clrw AX
 187 007f 34 80 00                		movw DE,#128
 188 0082 F3                      		clrb B
 189 0083 F9 01 00                		mov C,!_ulwos_current_task
 190 0086 82                      		inc C
 191 0087 05                      		LOOP:addw AX,DE
 192 0088 B3                      		decw BC
 193 0089 D3                      		cmp0 B
 194 008a DF FB                   		bnz $LOOP
 195 008c D2                      		cmp0 C
 196 008d DF F8                   		bnz $LOOP
 197 008f 12                      		movw BC,AX
 198 0090 30 00 00                		movw AX,#_ulwos_task_stack
 199 0093 03                      		addw AX,BC
 200 0094 BE F8                   		movw SP,AX
 201 0096 14                      		movw DE,AX
 202 0097 30 00 86                		movw AX,#0x8600
 203 009a C1                      		push AX
 204 009b AF 6A 00                		movw AX,!_ulwos_tempSP
 205 009e C1                      		push AX
 206                             		
 207                             	 ; 0 "" 2
 106:../src/ulwos.c **** 		"sel RB3\n\t"
 107:../src/ulwos.c **** 		"movw HL,SP\n\t"	// HL has the old SP
 108:../src/ulwos.c **** 		"clrw AX\n\t"		// AX = 0
 109:../src/ulwos.c **** 		"movw DE,%[tsz]\n\t"// DE = ULWOS_TASK_STACK_SIZE
 110:../src/ulwos.c **** 		"clrb B\n\t"
 111:../src/ulwos.c **** 		"mov C,%[ct]\n\t"	// BC = current_task
 112:../src/ulwos.c **** 		"inc C\n\t"
 113:../src/ulwos.c **** 		// this is a simple 16-bit multiply
 114:../src/ulwos.c **** 		"LOOP:"
 115:../src/ulwos.c **** 		"addw AX,DE\n\t"	// AX = AX + ULWOS_TASK_STACK_SIZE
 116:../src/ulwos.c **** 		"decw BC\n\t"		// BC = BC-1
 117:../src/ulwos.c **** 		"cmp0 B\n\t"		// compares B with 0
 118:../src/ulwos.c **** 		"bnz $LOOP\n\t"		// branch to loop if not zero
 119:../src/ulwos.c **** 		"cmp0 C\n\t"		// compares C with 0
 120:../src/ulwos.c **** 		"bnz $LOOP\n\t"		// branch to loop if not zero
 121:../src/ulwos.c **** 		// AX = ULWOS_TASK_STACK_SIZE * (current_task+1)
 122:../src/ulwos.c **** 		"movw BC,AX\n\t"
 123:../src/ulwos.c **** 		"movw AX,%[ts]\n\t"
 124:../src/ulwos.c **** 		"addw AX,BC\n\t"	// AX = pointer to task_stack[current_stack]
 125:../src/ulwos.c **** 		"movw SP,AX\n\t"	// set the SP to the top of the new task stack
 126:../src/ulwos.c **** 		"movw DE,AX\n\t"	// DE has the TOS for this task
 127:../src/ulwos.c **** 		"movw AX,#0x8600\n\t"
 128:../src/ulwos.c **** 		"push AX\n\t"		// save PSW and PCH (all 0)
 129:../src/ulwos.c **** 		"movw AX,%[tsp]\n\t"// AX = task function address (stored in tempSP)
 130:../src/ulwos.c **** 		"push AX\n\t"		// save the function address onto stack
 131:../src/ulwos.c **** 		:
 132:../src/ulwos.c **** 		:[tsz]"i"(ULWOS_TASK_STACK_SIZE),[ct]"m"(ulwos_current_task),[ts]"i"(ulwos_task_stack),[tsp]"m"(u
 133:../src/ulwos.c **** 	);
 134:../src/ulwos.c **** 	asm volatile (
 208                             		.loc 1 134 0
 209                             	 ; 134 "../src/ulwos.c" 1
 210 009f D9 01 00                		mov X,!_ulwos_current_task
 211 00a2 F1                      		clrb A
 212 00a3 31 1D                   		shlw AX,1
 213 00a5 32 02 00                		movw BC,#_ulwos_taskSP
 214 00a8 03                      		addw AX,BC
 215 00a9 14                      		movw DE,AX
 216 00aa AE F8                   		movw AX,SP
 217 00ac B9                      		movw [DE],AX
 218 00ad 17                      		movw AX,HL
 219 00ae BE F8                   		movw SP,AX
 220 00b0 61 CF                   		sel RB0
 221                             		
 222                             	 ; 0 "" 2
 135:../src/ulwos.c **** 		"mov X,%[ct]\n\t"	// X = current_task
 136:../src/ulwos.c **** 		"clrb A\n\t"		// A = 0 (AX = current_task)
 137:../src/ulwos.c **** 		"shlw AX,1\n\t"		// AX = current_task*2
 138:../src/ulwos.c **** 		"movw BC,%[tsp]\n\t"// BC = taskSP
 139:../src/ulwos.c **** 		"addw AX,BC\n\t"	// AX = taskSP+(current_task*2) => taskSP[current_task]
 140:../src/ulwos.c **** 		"movw DE,AX\n\t"	// DE = taskSP[current_task]
 141:../src/ulwos.c **** 		"movw AX,SP\n\t"	// AX = task's SP
 142:../src/ulwos.c **** 		"movw [DE],AX\n\t"	// task_SP[current_task] = task's SP
 143:../src/ulwos.c **** 		"movw AX,HL\n\t"
 144:../src/ulwos.c **** 		"movw SP,AX\n\t"	// restore the old SP
 145:../src/ulwos.c **** 		"sel RB0\n\t"
 146:../src/ulwos.c **** 		:
 147:../src/ulwos.c **** 		:[tsp]"i"(ulwos_taskSP),[ct]"m"(ulwos_current_task)
 148:../src/ulwos.c **** 	);
 149:../src/ulwos.c **** 	return ulwos_current_task;
 223                             		.loc 1 149 0
 224 00b2 8F 01 00                		mov	a, !_ulwos_current_task
 225 00b5 9D F0                   		mov	r8, a
 150:../src/ulwos.c **** }
 226                             		.loc 1 150 0
 227 00b7 D7                      		ret
 228                             	.L5:
 101:../src/ulwos.c **** 	ulwos_tempSP = (int) task_address;
 229                             		.loc 1 101 0
 230 00b8 CD F0 FF                		mov	r8, #-1
 231                             		.loc 1 150 0
 232 00bb D7                      		ret
 233                             	.LFE2:
 235                             		.global	_ulwos_start
 237                             	_ulwos_start:
 238                             	.LFB3:
 151:../src/ulwos.c **** 
 152:../src/ulwos.c **** void inline ulwos_start(void){
 239                             		.loc 1 152 0
 153:../src/ulwos.c **** 	ulwos_current_task = 0;
 240                             		.loc 1 153 0
 241 00bc F5 01 00                		clrb	!_ulwos_current_task
 154:../src/ulwos.c **** 	OSMC = bWUTMMCK0;		// set LOCO (15kHz) as the IT/RTC clock source
 242                             		.loc 1 154 0
 243 00bf 51 10                   		mov	a, #16
 244 00c1 9F F3 00                		mov	!243, a
 155:../src/ulwos.c **** 	RTCEN = 1;				// enables the RTC and IT
 245                             		.loc 1 155 0
 246 00c4 71 70 F0 00             		set1	!240.7
 156:../src/ulwos.c **** 	ITMC = bRINTE | 14;		// IT enabled, interval = 1ms
 247                             		.loc 1 156 0
 248 00c8 30 0E 80                		movw	ax, #-32754
 249 00cb BF 90 FF                		movw	!-112, ax
 157:../src/ulwos.c **** 	ITMK = 0;				// IT interrupt enabled
 250                             		.loc 1 157 0
 251 00ce 71 28 E7 FF             		clr1	!-25.2
 158:../src/ulwos.c **** 	asm volatile (
 252                             		.loc 1 158 0
 253                             	 ; 158 "../src/ulwos.c" 1
 254 00d2 61 FF                   		sel RB3
 255 00d4 AF 02 00                		movw AX,!_ulwos_taskSP
 256 00d7 BE F8                   		movw SP,AX
 257 00d9 61 FC                   		reti
 258 00db 00                      		nop
 259                             		
 260                             	 ; 0 "" 2
 159:../src/ulwos.c **** 		"sel RB3\n\t"		// select register bank 3
 160:../src/ulwos.c **** 		"movw AX,%[tsp]\n\t"// AX = taskSP[0]
 161:../src/ulwos.c **** 		"movw SP,AX\n\t"	// SP = AX = taskSP[0]
 162:../src/ulwos.c **** 		// this is a fake return from interrupt, it restores the PSW and PC from the stack
 163:../src/ulwos.c **** 		"reti\n\t"
 164:../src/ulwos.c **** 		"nop\n\t"
 165:../src/ulwos.c **** 		:
 166:../src/ulwos.c **** 		:[tsp]"m"(ulwos_taskSP)
 167:../src/ulwos.c **** 	);
 168:../src/ulwos.c **** }
 261                             		.loc 1 168 0
 262 00dc D7                      		ret
 263                             	.LFE3:
 265                             		.global	_INT_IT
 267                             	_INT_IT:
 268                             	.LFB4:
 169:../src/ulwos.c **** 
 170:../src/ulwos.c **** void __attribute__ ((naked)) INT_IT(void) {
 269                             		.loc 1 170 0
 270                             		; start of function
 271                             		; push 12: ax bc de hl r8 r10
 272                             	.LBB6:
 273                             	.LBB7:
  36:../src/ulwos.c **** 		"sel RB3\n\t"		// We are going to use bank3 as it is reserved for isr code
 274                             		.loc 1 36 0
 275                             	 ; 36 "../src/ulwos.c" 1
 276 00dd 61 FF                   		sel RB3
 277 00df D9 01 00                		mov X,!_ulwos_current_task
 278 00e2 F1                      		clrb A
 279 00e3 31 1D                   		shlw AX,1
 280 00e5 32 02 00                		movw BC,#_ulwos_taskSP
 281 00e8 03                      		addw AX,BC
 282 00e9 14                      		movw DE,AX
 283 00ea AE F8                   		movw AX,SP
 284 00ec B9                      		movw [DE],AX
 285 00ed 51 18                   		mov A,#24
 286 00ef D9 01 00                		mov X,!_ulwos_current_task
 287 00f2 80                      		inc X
 288 00f3 D6                      		mulu X
 289 00f4 04 0A 00                		addw AX,#_ulwos_task_context
 290 00f7 BE F8                   		movw SP,AX
 291                             		
 292                             	 ; 0 "" 2
  57:../src/ulwos.c **** 	save_regs();		// save regs from bank 2
 293                             		.loc 1 57 0
 294                             	 ; 57 "../src/ulwos.c" 1
 295 00f9 61 EF                   		sel RB2
 296                             	 ; 0 "" 2
  58:../src/ulwos.c **** 	asm ("sel RB1");
 297                             		.loc 1 58 0
 298                             	 ; 58 "../src/ulwos.c" 1
 299 00fb C1                      		push AX
 300 00fc C3                      		push BC
 301 00fd C5                      		push DE
 302 00fe C7                      		push HL
 303                             		
 304                             	 ; 0 "" 2
  59:../src/ulwos.c **** 	save_regs();		// save regs from bank 1
 305                             		.loc 1 59 0
 306                             	 ; 59 "../src/ulwos.c" 1
 307 00ff 61 DF                   		sel RB1
 308                             	 ; 0 "" 2
  60:../src/ulwos.c **** 	asm ("sel RB0");
 309                             		.loc 1 60 0
 310                             	 ; 60 "../src/ulwos.c" 1
 311 0101 C1                      		push AX
 312 0102 C3                      		push BC
 313 0103 C5                      		push DE
 314 0104 C7                      		push HL
 315                             		
 316                             	 ; 0 "" 2
  61:../src/ulwos.c **** 	save_regs();		// save regs from bank 0
 317                             		.loc 1 61 0
 318                             	 ; 61 "../src/ulwos.c" 1
 319 0105 61 CF                   		sel RB0
 320                             	 ; 0 "" 2
  62:../src/ulwos.c **** 	asm ("sel RB3");
 321                             		.loc 1 62 0
 322                             	 ; 62 "../src/ulwos.c" 1
 323 0107 C1                      		push AX
 324 0108 C3                      		push BC
 325 0109 C5                      		push DE
 326 010a C7                      		push HL
 327                             		
 328                             	 ; 0 "" 2
  63:../src/ulwos.c **** }
 329                             		.loc 1 63 0
 330                             	 ; 63 "../src/ulwos.c" 1
 331 010b 61 FF                   		sel RB3
 332                             	 ; 0 "" 2
 333                             	.LBE7:
 334                             	.LBE6:
 171:../src/ulwos.c **** 	save_context();
 172:../src/ulwos.c **** 	ulwos_current_task++;
 335                             		.loc 1 172 0
 336 010d A0 01 00                		inc	!_ulwos_current_task
 173:../src/ulwos.c **** 	if (ulwos_current_task>=ulwos_num_tasks) ulwos_current_task=0;
 337                             		.loc 1 173 0
 338 0110 8F 01 00                		mov	a, !_ulwos_current_task
 339 0113 9D F2                   		mov	r10, a
 340 0115 8F 00 00                		mov	a, !_ulwos_num_tasks
 341 0118 9D F0                   		mov	r8, a
 342 011a 8D F2                   		mov	a, r10
 343 011c 31 8F                   		sarw	ax, 8
 344 011e CD F1 00                		mov	r9, #0
 345 0121 46 F0                   		cmpw	ax, r8
 346 0123 71 FF                   		 xor1	CY, a.7
 347 0125 71 77 F1                		 xor1	CY, r9.7
 348 0128 61 D8                   		 sknc
 349 012a EC 31 01 00             		 br	!!.L9
 350                             		.loc 1 173 0 is_stmt 0 discriminator 1
 351 012e F5 01 00                		clrb	!_ulwos_current_task
 352                             	.L9:
 353                             	.LBB8:
 354                             	.LBB9:
  67:../src/ulwos.c **** 		// now we set the pointer to the context stack, so we can save current context
 355                             		.loc 1 67 0 is_stmt 1
 356                             	 ; 67 "../src/ulwos.c" 1
 357 0131 51 18                   		mov A,#24
 358 0133 D9 01 00                		mov X,!_ulwos_current_task
 359 0136 D6                      		mulu X
 360 0137 04 0A 00                		addw AX,#_ulwos_task_context
 361 013a BE F8                   		movw SP,AX
 362                             		
 363                             	 ; 0 "" 2
  78:../src/ulwos.c **** 	restore_regs();		// restore regs from bank 0
 364                             		.loc 1 78 0
 365                             	 ; 78 "../src/ulwos.c" 1
 366 013c 61 CF                   		sel RB0
 367                             	 ; 0 "" 2
  79:../src/ulwos.c **** 	asm ("sel RB1");
 368                             		.loc 1 79 0
 369                             	 ; 79 "../src/ulwos.c" 1
 370 013e C6                      		pop HL
 371 013f C4                      		pop DE
 372 0140 C2                      		pop BC
 373 0141 C0                      		pop AX
 374                             		
 375                             	 ; 0 "" 2
  80:../src/ulwos.c **** 	restore_regs();		// restore regs from bank 1
 376                             		.loc 1 80 0
 377                             	 ; 80 "../src/ulwos.c" 1
 378 0142 61 DF                   		sel RB1
 379                             	 ; 0 "" 2
  81:../src/ulwos.c **** 	asm ("sel RB2");
 380                             		.loc 1 81 0
 381                             	 ; 81 "../src/ulwos.c" 1
 382 0144 C6                      		pop HL
 383 0145 C4                      		pop DE
 384 0146 C2                      		pop BC
 385 0147 C0                      		pop AX
 386                             		
 387                             	 ; 0 "" 2
  82:../src/ulwos.c **** 	restore_regs();		// restore regs from bank 2
 388                             		.loc 1 82 0
 389                             	 ; 82 "../src/ulwos.c" 1
 390 0148 61 EF                   		sel RB2
 391                             	 ; 0 "" 2
  83:../src/ulwos.c **** 	asm volatile (
 392                             		.loc 1 83 0
 393                             	 ; 83 "../src/ulwos.c" 1
 394 014a C6                      		pop HL
 395 014b C4                      		pop DE
 396 014c C2                      		pop BC
 397 014d C0                      		pop AX
 398                             		
 399                             	 ; 0 "" 2
  84:../src/ulwos.c **** 		"sel RB3\n\t"
 400                             		.loc 1 84 0
 401                             	 ; 84 "../src/ulwos.c" 1
 402 014e 61 FF                   		sel RB3
 403 0150 D9 01 00                		mov X,!_ulwos_current_task
 404 0153 F1                      		clrb A
 405 0154 31 1D                   		shlw AX,1
 406 0156 32 02 00                		movw BC,#_ulwos_taskSP
 407 0159 03                      		addw AX,BC
 408 015a 14                      		movw DE,AX
 409 015b A9                      		movw AX,[DE]
 410 015c BE F8                   		movw SP,AX
 411 015e 61 FC                   		reti
 412                             		
 413                             	 ; 0 "" 2
 414                             	.LBE9:
 415                             	.LBE8:
 416                             	.LFE4:
 418                             		.comm	_ulwos_task_stack,512,1
 419                             		.local	_ulwos_num_tasks
 420                             		.comm	_ulwos_num_tasks,1,1
 421                             		.local	_ulwos_current_task
 422                             		.comm	_ulwos_current_task,1,1
 423                             		.local	_ulwos_taskSP
 424                             		.comm	_ulwos_taskSP,8,2
 425                             		.local	_ulwos_task_context
 426                             		.comm	_ulwos_task_context,96,2
 427                             		.local	_ulwos_tempSP
 428                             		.comm	_ulwos_tempSP,2,2
 487                             	.Letext0:
 488                             		.file 2 "../src/iodefine.h"
 489                             		.file 3 "../src/iodefine_ext.h"
 490                             		.file 4 "../src/ulwos.h"
